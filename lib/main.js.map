{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n############################################################################################################\nTRM                       = require 'coffeenode-trm'\nrpr                       = TRM.rpr.bind TRM\nbadge                     = 'jsEq'\nlog                       = TRM.get_logger 'plain',     badge\ninfo                      = TRM.get_logger 'info',      badge\nwhisper                   = TRM.get_logger 'whisper',   badge\nalert                     = TRM.get_logger 'alert',     badge\ndebug                     = TRM.get_logger 'debug',     badge\nwarn                      = TRM.get_logger 'warn',      badge\nhelp                      = TRM.get_logger 'help',      badge\nurge                      = TRM.get_logger 'urge',      badge\npraise                    = TRM.get_logger 'praise',    badge\necho                      = TRM.echo.bind TRM\n#...........................................................................................................\n@tests                    = require './tests'\n@imps                     = require './implementations'\nBNP                       = require 'coffeenode-bitsnpieces'\nTEXT                      = require 'coffeenode-text'\n### TAINT should use customized fork ###\nTYPES                     = require 'coffeenode-types'\n\n#-----------------------------------------------------------------------------------------------------------\n@new_counter = ( key, name ) ->\n  R =\n    'key':      key\n    'name':     name\n    'tests':    0\n    'fails':    0\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@main = ->\n  imp_count  = 0\n  test_count            = 0\n  fail_count            = 0\n  counters              = {}\n  results_by_test_name  = {}\n  minus_points          = []\n  #.........................................................................................................\n  for imp_name, imp of @imps\n    imp_count += 1\n    info imp_name\n    [ imp_key\n      imp_name\n      illegal...              ] = imp_name.split /:\\s+/\n    unless illegal.length is 0\n      throw new Error \"unsyntactic implementation name: #{rpr imp_name}\"\n    unless 0 < imp_key.length < 4\n      throw new Error \"unsyntactic implementation name: #{rpr imp_name}\"\n    unless imp_name.length > 1\n      throw new Error \"unsyntactic implementation name: #{rpr imp_name}\"\n    if counters[ imp_key ]?\n      throw new Error \"duplicate implementation key: #{rpr imp_name}\"\n    counter = @new_counter imp_key, imp_name\n    counters[ imp_key ] = counter\n    #.......................................................................................................\n    for test_name, test of @tests imp.eq, imp.ne\n      continue if test_name[ 0 ] is '_'\n      results_entry             = results_by_test_name[ test_name ]?= {}\n      results_entry[ imp_key ]  = true\n      title                     = \"#{imp_name} / #{test_name}\"\n      try\n        result                    = test.call @test\n      catch error\n        throw error unless error[ 'code' ] is 'jsEq'\n        minus_points.push [ imp_key, test_name, error[ 'message' ] ]\n        result = false\n      #.....................................................................................................\n      switch result_type = TYPES.type_of result\n        #...................................................................................................\n        when 'boolean'\n          test_count         += 1\n          counter[ 'tests' ] += 1\n          if result\n            praise title\n          else\n            fail_count               += 1\n            counter[ 'fails' ]       += 1\n            results_entry[ imp_key ]  = false\n            warn title\n        #...................................................................................................\n        when 'list'\n          unless ( length = result.length ) is 2\n            throw new Error \"#{title}: expected list of length 2, got one with length #{length}\"\n          [ sub_count, sub_errors, ] = result\n          unless ( count_type = TYPES.type_of sub_count ) is 'number'\n            throw new Error \"#{title}: expected a number, got a #{count_type}\"\n          unless sub_count > 0 and sub_count is Math.floor sub_count\n            throw new Error \"#{title}: expected an integer greater than zero, got #{sub_count}\"\n          unless ( errors_type = TYPES.type_of sub_errors ) is 'list'\n            throw new Error \"#{title}: expected a list, got a #{errors_type}\"\n          test_count         += sub_count\n          counter[ 'tests' ] += sub_count\n          if sub_errors.length is 0\n            praise title\n          else\n            results_entry[ imp_key ] = false\n            for sub_error in sub_errors\n              fail_count         += 1\n              counter[ 'fails' ] += 1\n              # warn \"#{title} / #{sub_error}\"\n            warn title\n        #...................................................................................................\n        else\n          throw new Error \"#{title}: expected a boolean or a list, got a #{result_type}\"\n  #.........................................................................................................\n  # whisper '-------------------------------------------------------------'\n  # info    \"Skipped #{skip_count} out of #{route_count} modules;\"\n  # info    \"of the #{route_count - skip_count} modules inspected,\"\n  # urge    \"#{miss_count} modules had no test cases.\"\n  # info    \"In the remaining #{route_count - miss_count - skip_count} modules,\"\n  # info    \"#{test_count} tests were performed,\"\n  # praise  \"of which #{pass_count} tests passed,\"\n  # warn    \"and #{fail_count} tests failed.\"\n  pass_count = test_count - fail_count\n  whisper '-------------------------------------------------------------'\n  info    \"Tested #{imp_count} implementations.\"\n  info    \"Overall, #{test_count} tests were run\"\n  praise  \"of which #{pass_count} tests passed,\"\n  warn    \"and #{fail_count} tests failed.\"\n  whisper '-------------------------------------------------------------'\n  #.........................................................................................................\n  counters = ( counter for ignored, counter of counters )\n  counters.sort ( a, b ) ->\n    return +1 if a[ 'name' ][ 0 ] is '!'\n    return -1 if b[ 'name' ][ 0 ] is '!'\n    return +1 if a[ 'fails' ] > b[ 'fails' ]\n    return -1 if a[ 'fails' ] < b[ 'fails' ]\n    return  0\n  Table                     = require 'cli-table'\n  #.........................................................................................................\n  options =\n    head: [ 'rank', 'key', 'implementation name', 'tests', 'passes', '%', 'fails', '%' ]\n    chars: 'mid': '', 'left-mid': '', 'mid-mid': '', 'right-mid': ''\n  table_1 = new Table options\n  width = 8\n  for counter, idx in counters\n    { key, name, tests, fails } = counter\n    passes                      = tests - fails\n    passes_percentage           = \"#{( passes / tests * 100 ).toFixed 2} %\"\n    fails_percentage            = \"#{(  fails / tests * 100 ).toFixed 2} %\"\n    table_1.push [\n      TRM.grey  idx + 1\n      TRM.gold  key\n      TRM.gold  name\n      TRM.blue  tests\n      TRM.green TEXT.flush_right passes,            width\n      TRM.green TEXT.flush_right passes_percentage, width\n      TRM.red   TEXT.flush_right fails,             width\n      TRM.red   TEXT.flush_right fails_percentage,  width\n      ]\n  #.........................................................................................................\n  headers   = [ '', ]\n  imp_keys  = ( counter[ 'key' ] for counter in counters )\n  headers.push.apply headers, imp_keys\n  options =\n    head: headers\n    chars: {\n      'top':     '', 'top-mid':    '', 'top-left':     '', 'top-right':    '',\n      'bottom':  '', 'bottom-mid': '', 'bottom-left':  '', 'bottom-right': '',\n      'left':    '', 'left-mid':   '', 'mid':          '', 'mid-mid':      '',\n      'right':   '', 'right-mid':  '', 'middle':       '' }\n  table_2 = new Table options\n  for test_name, success_by_imp_key of results_by_test_name\n    test_name = test_name[ ... 50 ] + '⋯' if test_name.length > 50\n    row = [ test_name ]\n    for imp_key in imp_keys\n      if success_by_imp_key[ imp_key ]\n        row.push TRM.green '◌'\n      else\n        row.push TRM.red '▼'\n    table_2.push row\n  #.........................................................................................................\n  log '\\n\\n' + table_1.toString()\n  help \"Figures for implementations marked with an `!` (exclamation mark)\"\n  help \"should be treated with care as their test setup is probably not correct.\"\n  #.........................................................................................................\n  log '\\n\\n' + table_2.toString()\n  #.........................................................................................................\n  if minus_points.length > 0\n    options =\n      head: [ 'key', 'test', 'reason' ]\n      chars: 'mid': '', 'left-mid': '', 'mid-mid': '', 'right-mid': ''\n    table_3 = new Table options\n    for [ imp_key, test_name, message, ] in minus_points\n      table_3.push [\n        TRM.gold imp_key\n        test_name\n        TRM.red message\n        ]\n    log '\\n' + ( TRM.blue 'Minus Points:\\n' ) + table_3.toString()\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  @main()\n\n\n"
  ]
}