{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n############################################################################################################\nTRM                       = require 'coffeenode-trm'\nrpr                       = TRM.rpr.bind TRM\nbadge                     = 'jsEq/tests'\nlog                       = TRM.get_logger 'plain',     badge\ninfo                      = TRM.get_logger 'info',      badge\nwhisper                   = TRM.get_logger 'whisper',   badge\nalert                     = TRM.get_logger 'alert',     badge\ndebug                     = TRM.get_logger 'debug',     badge\nwarn                      = TRM.get_logger 'warn',      badge\nhelp                      = TRM.get_logger 'help',      badge\necho                      = TRM.echo.bind TRM\n\n\n\n\n\n#-----------------------------------------------------------------------------------------------------------\nmodule.exports = ( eq, ne ) ->\n  R = {}\n\n  ### 1. simple tests ###\n\n  #---------------------------------------------------------------------------------------------------------\n  ### 1.1. positive ###\n\n  R[ \"NaN eqs NaN\"                                        ] = -> eq NaN, NaN\n  R[ \"finite integer n eqs n\"                             ] = -> eq 1234, 1234\n  R[ \"emtpy list eqs empty list\"                          ] = -> eq [], []\n  R[ \"emtpy obj eqs empty obj\"                            ] = -> eq {}, {}\n  R[ \"number eqs number of same value\"                    ] = -> eq 123.45678, 123.45678\n  R[ \"regex lit's w same pattern, flags are eq\"           ] = -> eq /^abc[a-zA-Z]/, /^abc[a-zA-Z]/\n  R[ \"pods w same properties are eq\"                      ] = -> eq { a:'b', c:'d' }, { a:'b', c:'d' }\n  R[ \"pods that only differ wrt prop ord are eq\"          ] = -> eq { a:'b', c:'d' }, { c:'d', a:'b' }\n\n  #---------------------------------------------------------------------------------------------------------\n  ### 1.2. negative ###\n\n  R[ \"obj doesn't eq list\"                                ] = -> ne {}, []\n  R[ \"obj in a list doesn't eq list in list\"              ] = -> ne [{}], [[]]\n  R[ \"integer n doesn't eq rpr n\"                         ] = -> ne 1234, '1234'\n  R[ \"integer n doesn't eq n + 1\"                         ] = -> ne 1234, 1235\n  R[ \"empty list doesn't eq false\"                        ] = -> ne [], false\n  R[ \"list w an integer doesn't eq one w rpr n\"           ] = -> ne [ 3 ], [ '3' ]\n  R[ \"regex lit's w diff. patterns, same flags aren't eq\" ] = -> ne /^abc[a-zA-Z]/, /^abc[a-zA-Z]x/\n  R[ \"regex lit's w same patterns, diff. flags aren't eq\" ] = -> ne /^abc[a-zA-Z]/, /^abc[a-zA-Z]/i\n  R[ \"+0 should ne -0\"                                    ] = -> ne +0, -0\n  R[ \"number obj not eqs primitive number of same value\"  ] = -> ne 5, new Number 5\n  R[ \"string obj not eqs primitive string of same value\"  ] = -> ne 'helo', new String 'helo'\n  R[ \"(1) bool obj not eqs primitive bool of same value\"  ] = -> ne false, new Boolean false\n  R[ \"(2) bool obj not eqs primitive bool of same value\"  ] = -> ne true,  new Boolean true\n\n  #=========================================================================================================\n  ### 2. complex tests ###\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"obj w undef member not eqs other obj w/out same member\" ] = ->\n    d = { x: undefined }\n    e = {}\n    return ne d, e\n\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"fn1: two functions are always ne\" ] = ->\n    d = `function( a, b, c ){ return a * b * c; }`\n    e = `function( a, b, c ){ return a * b * c; }`\n    return eq d, e\n\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"fn1: functions are eq to themselves\" ] = ->\n    d = `function( a, b, c ){ return a * b * c; }`\n    e = d\n    return eq d, e\n\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"list w named member eqs other list w same member\" ] = ->\n    d = [ 'foo', null, 3, ]; d[ 'extra' ] = 42\n    e = [ 'foo', null, 3, ]; e[ 'extra' ] = 42\n    return eq d, e\n\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"list w named member doesn't eq list w same member, other value\" ] = ->\n    d = [ 'foo', null, 3, ]; d[ 'extra' ] = 42\n    e = [ 'foo', null, 3, ]; e[ 'extra' ] = 108\n    return ne d, e\n\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"date eqs other date pointing to same time\" ] = ->\n    d = new Date \"1995-12-17T03:24:00\"\n    e = new Date \"1995-12-17T03:24:00\"\n    return eq d, e\n\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"date does not eq other date pointing to other time\" ] = ->\n    d = new Date \"1995-12-17T03:24:00\"\n    e = new Date \"1995-12-17T03:24:01\"\n    return ne d, e\n\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"str obj w props eq same str, same props\" ] = ->\n    d = new String \"helo test\"; d[ 'abc' ] = 42\n    e = new String \"helo test\"; e[ 'abc' ] = 42\n    return ne d, e\n\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"str obj w props not eq same str, other props\" ] = ->\n    d = new String \"helo test\"; d[ 'abc' ] = 42\n    e = new String \"helo test\"; e[ 'def' ] = 42\n    return ne d, e\n\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"str obj w props eq same str, same props (circ)\" ] = ->\n    c = [ 'a list', ]; c.push c\n    d = new String \"helo test\"; d[ 'abc' ] = c\n    e = new String \"helo test\"; e[ 'abc' ] = c\n    return ne d, e\n\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"str obj w props not eq same str, other props (circ)\" ] = ->\n    c = [ 'a list', ]; c.push c\n    d = new String \"helo test\"; d[ 'abc' ] = c\n    e = new String \"helo test\"; e[ 'def' ] = c\n    return ne d, e\n\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"empty objs ne when diff prototypes\" ] = ->\n    d = {}\n    e = Object.create null\n    return ne d, e\n\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"(1) circ arrays w similar layout, same values aren't eq\" ] = ->\n    d = [ 1, 2, 3, ]; d.push d\n    e = [ 1, 2, 3, ]; e.push d\n    return ne d, e\n\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"(2) circ arrays w same layout, same values are eq\" ] = ->\n    d = [ 1, 2, 3, ]; d.push d\n    e = [ 1, 2, 3, ]; e.push e\n    return eq d, e\n\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"(fkling1) arrays w eq subarrays are eq\" ] = ->\n    a   = [ 1, 2, 3, ]\n    b   = [ 1, 2, 3, ]\n    foo = [ a, a, ]\n    bar = [ b, b, ]\n    return eq foo, bar\n\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"(fkling2) arrays w eq subarrays but diff distribution aren't eq\" ] = ->\n    a   = [ 1, 2, 3, ]\n    b   = [ 1, 2, 3, ]\n    foo = [ a, a, ]\n    bar = [ a, b, ]\n    return ne foo, bar\n\n  #---------------------------------------------------------------------------------------------------------\n  ### joshwilsdon's test (https://github.com/joyent/node/issues/7161) ###\n  R[ \"joshwilsdon\" ] = ->\n    d1 = [ NaN, undefined, null, true, false, Infinity, 0, 1, \"a\", \"b\", {a: 1}, {a: \"a\"},\n      [{a: 1}], [{a: true}], {a: 1, b: 2}, [1, 2], [1, 2, 3], {a: \"1\"}, {a: \"1\", b: \"2\"} ]\n    d2 = [ NaN, undefined, null, true, false, Infinity, 0, 1, \"a\", \"b\", {a: 1}, {a: \"a\"},\n      [{a: 1}], [{a: true}], {a: 1, b: 2}, [1, 2], [1, 2, 3], {a: \"1\"}, {a: \"1\", b: \"2\"} ]\n    errors = []\n    count = 0\n    for v1, idx1 in d1\n      for idx2 in [ idx1 ... d2.length ]\n        count += 1\n        v2 = d2[ idx2 ]\n        if idx1 == idx2\n          unless eq v1, v2\n            errors.push \"eq #{rpr v1}, #{rpr v2}\"\n        else\n          unless ne v1, v2\n            errors.push \"ne #{rpr v1}, #{rpr v2}\"\n    #.......................................................................................................\n    # whisper count\n    return [ count, errors, ]\n\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"(MapSet1) Support for Maps and Sets\" ] = ->\n    a = new Set 'abcdef'\n    b = new Set 'abcdef'\n    return eq a, b\n\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"(MapSet2) Support for Maps and Sets\" ] = ->\n    a = new Set 'abcdef'\n    b = new Set 'abcdefg'\n    return ne a, b\n\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"(MapSet3) Support for Maps and Sets\" ] = ->\n    a = new Map [ [ 'a', 42, ], [ 'b', 108, ], [ true, 'yes', ], ]\n    b = new Map [ [ 'a', 42, ], [ 'b', 108, ], [ true, 'yes', ], ]\n    return eq a, b\n\n  #---------------------------------------------------------------------------------------------------------\n  R[ \"(MapSet4) Support for Maps and Sets\" ] = ->\n    a = new Map [ [ 'a', 42, ], [ 'b', 108, ], [ true, 'yes', ], [ [ 1, 2, 3, ], ], ]\n    b = new Map [ [ 'a', 42, ], [ 'b', 108, ], [ true, 'yes', ], [ [ 1, 2, 3, ], ], ]\n    return eq a, b\n\n  #---------------------------------------------------------------------------------------------------------\n  return R\n\n\n"
  ]
}